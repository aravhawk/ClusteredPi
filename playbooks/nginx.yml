---
- name: Install `myapp` on Web Nodes
  # hosts: web
  hosts: node03
  # hosts: master
  tasks:
     - name: clone git 
       git:
         repo: 'https://github.com/kevinmcaleer/ClusteredPi'
         dest: /home/pi/ClusteredPi
         clone: yes
         update: yes
       register: output

     - ansible.builtin.debug:
         var: output
         
     - name: remove myapp container
       community.docker.docker_compose:
        project_src: '/home/pi/ClusteredPi/stacks/jekyll'
        state: absent
        remove_images: all
       register: output
       
     - ansible.builtin.debug:
         var: output

     - name: Prune everything
       community.docker.docker_prune:
         containers: yes
         images: yes
         networks: yes
         volumes: yes
         builder_cache: yes

     - name: get local hostname 
       action: command /usr/bin/hostname
       register: host

     - ansible.builtin.debug:
         var: host.stdout       

     - name:  put hostname into a file
       ansible.builtin.lineinfile:
         create: yes
         path: /home/pi/ClusteredPi/stacks/jekyll/data_config.yml
         insertbefore: BOF
         state: present
         line: "hostname: {{ host.stdout }}"

     - name:  put hostname into _config.yml file
       ansible.builtin.lineinfile:
         create: yes
         path: /home/pi/ClusteredPi/stacks/jekyll/web_config.yml
         insertbefore: BOF
         state: present
         line: '{{ item }}'
       with_items:
         - "hostname: {{ host.stdout }}"
         - "title: Clustered-Pi"
         - "email: kevinmcaleer@gmail.com"
         - "description: This is the official website of Clustered-Pi"
         - 'url: "http://www.clustered-pi.com"'
         - 'baseurl: ""'
         - "markdown: kramdown"
         - "permalink: /blog/:title:output_ext"
    #  - name: put hostname into a file
      #  action: command echo {{host}} > /home/pi/ClusteredPi/web/_data/config.yml
      #  action: copy content={{host}} dest=/home/pi/ClusteredPi/web/_data/config.yml

     - ansible.builtin.debug:
         var: output

     - name: Current Playbook working path
       shell: pwd
       register: playbook_path_output
     - debug: var=playbook_path_output.stdout

     - name: Bring myApp up
       community.docker.docker_compose:
         project_src: /home/pi/ClusteredPi/stacks/jekyll
         build: no
         nocache: yes
         recreate: always
         state: present
       register: output
  
     - ansible.builtin.debug:
         var: output